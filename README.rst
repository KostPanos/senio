Senio (Sentinel-IO)
==================

Senio simplifies working with Sentinel-2 L2A products by handling all preprocessing steps. It is compatible with Python 3.8+,
and relies primarily on rasterio, and numpy. While the library contains some experimental features, its core functionality
is stable. If you encounter any unexpected behavior, please open an issue.

**Currently, the tool is not available through pip or conda**. You can clone or download the repository to your working
directory and import Senio as is.

Who is this package for?
========================

Are you frustrated with Sentinel's L2A product file format? Do you wish to automate the preprocessing of all
available bands, and format them in an easy-to-use way? Would you prefer to work with TIFF files instead of .jp2 files?
If so, this package is designed for you.

How it works
============

I encourage you to read the function descriptions for each processor, which are located in the ``processors.py`` file.
However, if you're feeling lazy, here's an overview of how it works, followed by a more detailed explanation.
Both descriptions have been generated by ChatGPT, because, well, I am lazy.

The lazy description
--------------------

The ``processor_all`` function processes Sentinel-2 L2A products by taking a product path as input, which can optionally specify
an output location. It identifies and processes all the bands in 10m, 20m, and 60m resolutions, sorts and stacks them, and
then saves the data as temporary TIFF files. The 20m and 60m bands are resampled to match the 10m resolution using
user-defined resampling methods such as nearest, bilinear, or cubic. The stacked bands are saved as a compressed TIFF file,
with the option to create .aux.xml files for statistics. Additionally, pyramids (overviews) can be built for the TIFF if
desired. Temporary files are cleaned up to free up space, and the function logs progress and records processing time before
completion. Overall, this function streamlines the preprocessing of Sentinel-2 imagery, making it more convenient for use in
GIS environments with various customization options.

The ``processor_rgbn`` function performs the same task as ``processor_all`` but utilizes only the 10m bands.

The detailed description
-----------------------

Function Signature
~~~~~~~~~~~~~~~~~~

.. code-block:: python

   def processor_all(
       product_path: str,
       output_path: str = None,
       resample: str = "nearest",
       xml: bool = True,
       pyramids: bool = True,
   ) -> None:

- ``product_path`` (str): The path of the Sentinel-2 product (.SAFE or .zip).
- ``output_path`` (str, Optional): The location to output the formatted product. By default, it creates a folder in the .SAFE directory.
- ``resample`` (str, Optional): The sampling method to use for the 20m and 60m bands. The available options are "nearest", "bilinear", and "cubic." By default, it's set to "nearest."
- ``xml`` (bool, Optional): Create the .aux.xml image statistics. These statistics are not extracted by an external auxiliary file but calculated on the spot. By default, it's True.
- ``pyramids`` (bool, Optional): Create the .ovr pyramids file with zoom factors (2, 4, 8, 16) and "nearest" resampling method. By default, it's True.

1. The function initializes a timer to measure the processing time and extracts the `safe_path` from the given `product_path`.

2. If an `output_path` is provided, it sets the `output_folder_path` to that location. Otherwise, it creates a default 
"`GTIFF_PRODUCT`" folder in the .SAFE directory for output.

Temporary Folder Creation
~~~~~~~~~~~~~~~~~~~~~~~~~

A temporary folder called "TEMP" is created within the .SAFE directory.

Locating Granule Data
~~~~~~~~~~~~~~~~~~~~~

The function locates the granule data within the .SAFE directory. If "L2A" is found in the granule name,
it proceeds; otherwise, it raises an error.

Band Processing
~~~~~~~~~~~~~~~

The function identifies, and processes bands of interest within the 10m, 20m, and 60m resolution categories.
It extracts and stacks the relevant bands.

Sorting Bands
~~~~~~~~~~~~~

The bands are sorted according to their codes to ensure consistent ordering.

Saving Bands to Temporary Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The 10m, 20m, and 60m bands are saved as temporary GeoTIFF files in the TEMP folder.

Resampling
~~~~~~~~~~

The 20m and 60m bands are resampled to match the resolution of the 10m bands based on the selected resampling method.

Stacking Bands
~~~~~~~~~~~~~~

The bands are stacked into a single array, ensuring they align correctly based on their resolutions.

Saving Processed Data
~~~~~~~~~~~~~~~~~~~~~

The stacked array is saved as a GeoTIFF file with specified compression settings. If xml is ``True``, .aux.xml files are
created for statistics.

Building Pyramids
~~~~~~~~~~~~~~~~~

If pyramids is ``True``, overviews (pyramids) are built for the GeoTIFF file with specified zoom factors, and resampling method.

Temporary Folder Cleanup
~~~~~~~~~~~~~~~~~~~~~~~~

The temporary folder is deleted to free up space.

Logging
~~~~~~~

Throughout the process, the function logs its progress, including which bands are being processed
and when the processing is completed.

Completion Time
~~~~~~~~~~~~~~~

The function records the time taken for processing and logs it.

Function Exit
~~~~~~~~~~~~~

The function returns ``None`` and completes its execution.

How to use
==========

Below is an example of using Senio for large-scale S2L2A preprocessing. Suppose you have many zipped and unzipped
S2L2A products in the ``.../unzipped_imagery/`` directory. You can use the ``glob`` module to search for all the
.SAFE products and then, for each one, utilize the ``senio.processor_all`` method to preprocess all 12 bands. If you don't specify
an output directory path, Senio will create a folder named ``GTIFF_PRODUCT`` for each S2L2A product, where it will output the
formatted .tif, .ovr, and .aux.xml files. It logs the entire process in the ``Logs`` folder that it creates in the parent directory.

.. code-block:: python
        
    # Import the Senio library and the glob module for file searching
    import senio
    import glob

    # Use the glob module to search for all .SAFE products in the directory
    safe_paths_list = glob.glob(".../unzipped_imagery/*.SAFE")

    # Loop through each S2L2A product and preprocess all 12 bands
    for product_path in safe_paths_list:
        senio.processor_all(
            product_path=product_path,
            output_path=None,  # Automatically creates 'GTIFF_PRODUCT' folder
            resample="nearest",  # Resampling method (e.g., nearest, bilinear)
            xml=True,  # Generate .aux.xml image statistics
            pyramids=True,  # Create .ovr pyramids with zoom factors
        )
